<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Asign Filming Tracker</title>
    <link href="https://fonts.googleapis.com/css2?family=Domine:wght@400;500&family=Manrope:wght@400;600;700&family=Quicksand:wght@400;500&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Domine', serif;
            background-color: #F4F7FA;
            color: #1C3360;
            margin: 20px;
        }
        h2, h3 {
            font-family: 'Manrope', sans-serif;
            color: #005FA8;
            margin-bottom: 10px;
        }
        label {
            font-weight: bold;
            font-family: 'Manrope', sans-serif;
            color: #222D3F;
            display: block;
            margin-top: 10px;
        }
        input[type="text"], input[type="number"], input[type="url"], textarea, input[type="date"] {
            width: 100%;
            padding: 12px;
            margin: 5px 0 15px;
            border: 2px solid #B1CBAB;
            border-radius: 30px;
            box-sizing: border-box;
            font-family: 'Domine', serif;
            outline: none;
            transition: border-color 0.3s ease;
        }
        input:focus, textarea:focus {
            border-color: #9FAE86;
        }
        button {
            font-family: 'Quicksand', sans-serif;
            background-color: #005FA8;
            color: white;
            padding: 15px 30px;
            border: none;
            cursor: pointer;
            border-radius: 30px;
            margin-top: 20px;
            font-size: 18px;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #003F7A;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .control-panel {
            text-align: center;
            margin-top: 40px;
        }
        .status {
            font-size: 20px;
            margin-top: 10px;
            color: #005FA8;
            font-family: 'Manrope', sans-serif;
        }
        .timer {
            font-size: 24px;
            margin-top: 10px;
            color: #E74C3C;
            font-family: 'Manrope', sans-serif;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 30px;
            font-family: 'Domine', serif;
        }
        th, td {
            border: 2px solid #B1CBAB;
            padding: 10px;
            text-align: left;
            vertical-align: top;
        }
        th {
            background-color: #E6F0FA;
            color: #005FA8;
            font-family: 'Manrope', sans-serif;
        }
        .prompt-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
        }
        .prompt {
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            max-width: 500px;
            width: 90%;
        }
        .prompt-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }
        .prompt-buttons button {
            width: 100px;
            margin: 0;
            padding: 10px 0;
            font-size: 16px;
            border-radius: 20px;
        }
        .hidden {
            display: none;
        }
        .small-input {
            width: 100%;
            padding: 8px;
            margin: 5px 0 15px;
            border: 2px solid #B1CBAB;
            border-radius: 20px;
            box-sizing: border-box;
            font-family: 'Domine', serif;
            outline: none;
            transition: border-color 0.3s ease;
        }
        /* Export button styling */
        .export-button {
            font-family: 'Quicksand', sans-serif;
            background-color: #9FAE86;
            color: white;
            padding: 12px 25px;
            border: none;
            cursor: pointer;
            border-radius: 30px;
            margin-top: 20px;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }
        .export-button:hover {
            background-color: #7F936C;
        }
        /* Date input styling */
        .date-input-container {
            position: relative;
        }
        .date-input-container input[type="date"] {
            text-align: center;
            padding-left: 50px; /* Space for the icon */
            width: 100%;
            padding: 12px;
            margin: 5px 0 15px;
            border: 2px solid #B1CBAB;
            border-radius: 30px;
            box-sizing: border-box;
            font-family: 'Domine', serif;
            outline: none;
            transition: border-color 0.3s ease;
        }
        .date-input-container input[type="date"]::-webkit-calendar-picker-indicator {
            position: absolute;
            left: 15px; /* Move the default icon to the left */
            top: 50%;
            transform: translateY(-50%);
            width: 24px;
            height: 24px;
            cursor: pointer;
        }
        /* Hide default icon on the right */
        .date-input-container input[type="date"]::-webkit-inner-spin-button,
        .date-input-container input[type="date"]::-webkit-clear-button {
            display: none;
        }
        /* For Firefox */
        @-moz-document url-prefix() {
            .date-input-container input[type="date"] {
                padding-left: 50px;
            }
            .date-input-container input[type="date"]::-moz-calendar-picker-indicator {
                position: absolute;
                left: 15px;
                top: 50%;
                transform: translateY(-50%);
            }
        }
        /* Project Info Display */
        .project-info {
            text-align: left;
            margin-top: 20px;
            background-color: #E6F0FA; /* Light blue background */
            padding: 20px;
            border-radius: 10px;
        }
        .project-info-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .project-info table {
            width: 100%;
            border-collapse: collapse;
        }
        .project-info th, .project-info td {
            padding: 5px 0;
            border: none;
        }
        .project-info th {
            width: 200px;
            text-align: left;
            font-weight: normal;
            color: #222D3F; /* Neutral dark color */
        }
        .project-info td {
            color: #1C3360; /* Adjusted for readability */
        }
        .edit-project-button {
            font-family: 'Quicksand', sans-serif;
            background-color: #005FA8;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 20px;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }
        .edit-project-button:hover {
            background-color: #003F7A;
        }
        /* Row coloring */
        .good-take-yes, .good-take-maybe {
            background-color: #E6F9E6; /* Light green */
        }
        .good-take-no {
            background-color: #F0F0F0; /* Light grey */
        }
    </style>
</head>
<body>

<div class="container">
    <h2>Filming Tracker</h2>

    <!-- Project Information -->
    <form id="project-form">
        <h3>Project Information</h3>
        <label for="project-name">Project Name:</label>
        <input type="text" id="project-name" name="project-name">

        <label for="translator-name">ASL Translator Name:</label>
        <input type="text" id="translator-name" name="translator-name">

        <label for="coach-name">ASL Coach Name:</label>
        <input type="text" id="coach-name" name="coach-name">

        <label for="date-of-filming">Date of Filming:</label>
        <div class="date-input-container">
            <input type="date" id="date-of-filming" name="date-of-filming">
        </div>

        <label for="location">Location:</label>
        <input type="text" id="location" name="location">

        <label for="starting-clip">Starting Clip Number:</label>
        <input type="text" id="starting-clip" name="starting-clip" placeholder="e.g., 001">

        <!-- Start Session Button -->
        <button type="submit">Start Session</button>
    </form>

    <!-- Control Panel -->
    <div id="control-panel" class="control-panel hidden">
        <!-- Display Project Information -->
        <div class="project-info" id="project-info">
            <div class="project-info-header">
                <h3>Project Information</h3>
                <button id="edit-project-button" class="edit-project-button">Edit Project Info</button>
            </div>
            <!-- Project details will be injected here -->
        </div>
        <button id="record-button">Start Recording</button>
        <div class="status" id="status"></div>
        <div class="timer" id="timer">00:00:00</div>
        <!-- Export Button -->
        <button id="export-button" class="export-button">Export Data</button>
    </div>

    <!-- Clip Log Table -->
    <table id="clip-table" class="hidden">
        <thead>
            <tr>
                <th>Clip Number</th>
                <th>Clip Length</th>
                <th>Good Take</th>
                <th>Script Section/Line</th>
                <th>Comments/Notes</th>
            </tr>
        </thead>
        <tbody>
            <!-- Entries will be added here dynamically -->
        </tbody>
    </table>

</div>

<!-- Prompt Overlay -->
<div id="prompt-overlay" class="prompt-overlay">
    <div class="prompt" id="prompt">
        <!-- Prompt content will be injected here -->
    </div>
</div>

<script>
    let clipNumber = '';
    let recording = false;
    let projectData = {};
    let clipLogs = [];
    let startTime;
    let elapsedTime = 0;
    let timerInterval;
    let isEditingProjectInfo = false;

    const projectForm = document.getElementById('project-form');
    const controlPanel = document.getElementById('control-panel');
    const projectInfoDiv = document.getElementById('project-info');
    const recordButton = document.getElementById('record-button');
    const statusDiv = document.getElementById('status');
    const timerDiv = document.getElementById('timer');
    const clipTable = document.getElementById('clip-table');
    const clipTableBody = clipTable.querySelector('tbody');
    const promptOverlay = document.getElementById('prompt-overlay');
    const promptDiv = document.getElementById('prompt');
    const exportButton = document.getElementById('export-button');
    const editProjectButton = document.getElementById('edit-project-button');

    projectForm.addEventListener('submit', function(e) {
        e.preventDefault();
        // Collect project information
        let newProjectData = {
            projectName: document.getElementById('project-name').value,
            translatorName: document.getElementById('translator-name').value,
            coachName: document.getElementById('coach-name').value,
            dateOfFilming: document.getElementById('date-of-filming').value,
            location: document.getElementById('location').value,
            startingClip: document.getElementById('starting-clip').value || '0001'
        };
        projectData = newProjectData;
        if (!isEditingProjectInfo) {
            clipNumber = padClipNumber(projectData.startingClip, projectData.startingClip.length);
        }
        projectForm.classList.add('hidden');
        controlPanel.classList.remove('hidden');
        clipTable.classList.remove('hidden');
        displayProjectInfo();
        updateStatus();
        isEditingProjectInfo = false; // Reset the flag
        document.getElementById('starting-clip').disabled = false; // Re-enable the field
    });

    function displayProjectInfo() {
        projectInfoDiv.innerHTML = `
            <div class="project-info-header">
                <h3>Project Information</h3>
                <button id="edit-project-button" class="edit-project-button">Edit Project Info</button>
            </div>
            <table>
                <tr><th>Project Name:</th><td>${projectData.projectName}</td></tr>
                <tr><th>ASL Translator Name:</th><td>${projectData.translatorName}</td></tr>
                <tr><th>ASL Coach Name:</th><td>${projectData.coachName}</td></tr>
                <tr><th>Date of Filming:</th><td>${projectData.dateOfFilming}</td></tr>
                <tr><th>Location:</th><td>${projectData.location}</td></tr>
            </table>
        `;
        // Reattach event listener to the new button
        document.getElementById('edit-project-button').addEventListener('click', function() {
            isEditingProjectInfo = true;
            populateProjectForm();
            controlPanel.classList.add('hidden');
            clipTable.classList.add('hidden');
            projectForm.classList.remove('hidden');
        });
    }

    function populateProjectForm() {
        document.getElementById('project-name').value = projectData.projectName || '';
        document.getElementById('translator-name').value = projectData.translatorName || '';
        document.getElementById('coach-name').value = projectData.coachName || '';
        document.getElementById('date-of-filming').value = projectData.dateOfFilming || '';
        document.getElementById('location').value = projectData.location || '';
        document.getElementById('starting-clip').value = projectData.startingClip || '0001';
        if (isEditingProjectInfo) {
            document.getElementById('starting-clip').disabled = true; // Disable starting clip number during edit
        } else {
            document.getElementById('starting-clip').disabled = false;
        }
    }

    recordButton.addEventListener('click', function() {
        if (!recording) {
            // Start Recording
            recording = true;
            statusDiv.textContent = `Recording... Clip${clipNumber}.MXF`;
            recordButton.textContent = 'End Recording';
            startTimer();
        } else {
            // End Recording
            recording = false;
            statusDiv.textContent = '';
            recordButton.textContent = 'Start Recording';
            stopTimer();
            // Show prompt for good take
            showGoodTakePrompt();
        }
    });

    function updateStatus() {
        statusDiv.textContent = `Ready to record Clip${clipNumber}.MXF`;
    }

    function incrementClipNumber() {
        let num = parseInt(clipNumber, 10);
        if (isNaN(num)) {
            num = 0;
        }
        num++;
        clipNumber = padClipNumber(num.toString(), clipNumber.length);
    }

    function padClipNumber(number, width) {
        number = number.toString();
        width = width || 4; // Default width to 4 if not provided
        return number.length >= width ? number : new Array(width - number.length + 1).join('0') + number;
    }

    function showGoodTakePrompt() {
        promptOverlay.style.display = 'flex';
        promptDiv.innerHTML = `
            <h3>Was this a good take?</h3>
            <div class="prompt-buttons">
                <button id="good-take-yes">Yes</button>
                <button id="good-take-maybe">Maybe</button>
                <button id="good-take-no">No</button>
            </div>
        `;
        document.getElementById('good-take-yes').addEventListener('click', function() {
            promptForDetails('Yes');
        });
        document.getElementById('good-take-maybe').addEventListener('click', function() {
            promptForDetails('Maybe');
        });
        document.getElementById('good-take-no').addEventListener('click', function() {
            logTake('No');
            promptOverlay.style.display = 'none';
            incrementClipNumber();
            updateStatus();
        });
    }

    function promptForDetails(goodTake) {
        promptDiv.innerHTML = `
            <h3>Enter Script Section/Line</h3>
            <input type="text" id="script-section" class="small-input" placeholder="e.g., Intro Paragraph">
            <h3>Any Comments or Notes?</h3>
            <input type="text" id="comments" class="small-input" placeholder="Optional">
            <button id="save-details">Save</button>
        `;
        document.getElementById('save-details').addEventListener('click', function() {
            const scriptSection = document.getElementById('script-section').value;
            const comments = document.getElementById('comments').value;
            logTake(goodTake, scriptSection, comments);
            promptOverlay.style.display = 'none';
            incrementClipNumber();
            updateStatus();
        });
    }

    function logTake(goodTake, scriptSection = '', comments = '') {
        // Save the take data
        const takeData = {
            clipNumber: 'Clip' + clipNumber + '.MXF',
            clipLength: formatTime(elapsedTime),
            goodTake: goodTake,
            scriptSection: scriptSection,
            comments: comments,
            rowClass: goodTake === 'Yes' || goodTake === 'Maybe' ? 'good-take-yes' : 'good-take-no'
        };
        clipLogs.push(takeData);

        // Add to table
        const row = document.createElement('tr');
        row.classList.add(takeData.rowClass);
        row.innerHTML = `
            <td>${takeData.clipNumber}</td>
            <td>${takeData.clipLength}</td>
            <td>${takeData.goodTake}</td>
            <td>${takeData.scriptSection}</td>
            <td>${takeData.comments}</td>
        `;

        clipTableBody.appendChild(row);
        resetTimer();
    }

    exportButton.addEventListener('click', function() {
        exportData();
    });

    function exportData() {
        // Create HTML content
        let htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Filming Tracker Report</title>
            <style>
                ${document.querySelector('style').innerText}
            </style>
        </head>
        <body>
            <div class="container">
                <h2>Filming Tracker Report</h2>
                <h3>Project Information</h3>
                <table>
                    <tr><th>Project Name</th><td>${projectData.projectName}</td></tr>
                    <tr><th>ASL Translator Name</th><td>${projectData.translatorName}</td></tr>
                    <tr><th>ASL Coach Name</th><td>${projectData.coachName}</td></tr>
                    <tr><th>Date of Filming</th><td>${projectData.dateOfFilming}</td></tr>
                    <tr><th>Location</th><td>${projectData.location}</td></tr>
                </table>
                <h3>Clip Logs</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Clip Number</th>
                            <th>Clip Length</th>
                            <th>Good Take</th>
                            <th>Script Section/Line</th>
                            <th>Comments/Notes</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        clipLogs.forEach(function(row) {
            htmlContent += `
                <tr class="${row.rowClass}">
                    <td>${row.clipNumber}</td>
                    <td>${row.clipLength}</td>
                    <td>${row.goodTake}</td>
                    <td>${row.scriptSection}</td>
                    <td>${row.comments}</td>
                </tr>
            `;
        });

        htmlContent += `
                    </tbody>
                </table>
            </div>
        </body>
        </html>
        `;

        // Create a blob and trigger the download
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const link = document.createElement('a');
        const date = new Date().toISOString().slice(0,10);
        const filename = `Clip_Tracking_${projectData.projectName.replace(/ /g, '_')}_${date}.html`;
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);

        link.click();
        document.body.removeChild(link);
    }

    // Timer Functions
    function startTimer() {
        startTime = Date.now() - elapsedTime;
        timerInterval = setInterval(function printTime() {
            elapsedTime = Date.now() - startTime;
            timerDiv.textContent = formatTime(elapsedTime);
        }, 1000);
    }

    function stopTimer() {
        clearInterval(timerInterval);
    }

    function resetTimer() {
        clearInterval(timerInterval);
        elapsedTime = 0;
        timerDiv.textContent = '00:00:00';
    }

    function formatTime(time) {
        let diffInHrs = time / 3600000;
        let hh = Math.floor(diffInHrs);

        let diffInMin = (diffInHrs - hh) * 60;
        let mm = Math.floor(diffInMin);

        let diffInSec = (diffInMin - mm) * 60;
        let ss = Math.floor(diffInSec);

        let formattedHH = hh.toString().padStart(2, '0');
        let formattedMM = mm.toString().padStart(2, '0');
        let formattedSS = ss.toString().padStart(2, '0');

        return `${formattedHH}:${formattedMM}:${formattedSS}`;
    }
</script>

</body>
</html>
